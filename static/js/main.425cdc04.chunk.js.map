{"version":3,"sources":["hooks/UseCanvas.js","utils/utils.js","components/Canvas.js","components/Controls.js","animations/Expand.js","animations/Orbit.js","App.js","index.js"],"names":["useCanvas","update","options","onMouseMove","context","event","onTouchMove","canvasRef","useRef","useEffect","animationFrameId","current","getContext","frameCount","canvas","onmousemove","ontouchmove","draw","window","requestAnimationFrame","cancelAnimationFrame","pythagoras","a","b","Math","sqrt","vector","point1","point2","distance","x","y","x2","y2","Canvas","props","center","useCallback","width","height","colors","maxDistance","scaleLinear","domain","range","secondColor","firstColor","colorsInverted","ctx","clearRect","fillStyle","fillRect","voronoi","Delaunay","from","particles","color","beginPath","renderCell","fill","forEach","p","i","next","animation","render","renderBounds","lineWidth","strokeSize","strokeStyle","strokeColor","stroke","handleMouseMove","offsetX","offsetY","ref","Controls","className","type","value","numPoints","min","max","onChange","e","onOptionsChange","target","animations","name","onClick","onResetClick","expand","index","centerPoint","v","normalize","round","orbit","radius","console","log","radians","atan2","newRadians","newX","cos","newY","sin","App","innerWidth","innerHeight","none","useState","setOptions","showMenu","setShowMenu","randomParticles","Array","length","random","setParticles","class","ariaHidden","val","key","resetPoints","newOptions","Object","assign","onControlChange","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.425cdc04.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nconst useCanvas = (\r\n  update,\r\n  options = {\r\n    onMouseMove: (context, event) => {},\r\n    onTouchMove: (context, event) => {},\r\n  }\r\n) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext(\"2d\");\r\n    let frameCount = 0;\r\n    let animationFrameId;\r\n    context.canvas.onmousemove = (event) => {\r\n      options.onMouseMove(context, event);\r\n    };\r\n    context.canvas.ontouchmove = (event) => {\r\n      options.onTouchMove(context, event);\r\n    };\r\n\r\n    const draw = () => {\r\n      frameCount++;\r\n      update(context, frameCount);\r\n      animationFrameId = window.requestAnimationFrame(draw);\r\n    };\r\n    draw();\r\n\r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, [update, options]);\r\n\r\n  return canvasRef;\r\n};\r\n\r\nexport default useCanvas;\r\n","export const pythagoras = (a, b) => Math.sqrt(a * a + b * b);\r\n\r\nexport const vector = (point1, point2) => [\r\n    point2[0] * 1.0 - point1[0] * 1.0,\r\n    point2[1] * 1.0 - point1[1] * 1.0,\r\n];\r\n\r\nexport const normalize = (point1, point2) => {\r\n    const v = vector(point1, point2);\r\n    const distance = pythagoras(v[0], v[1]);\r\n    const xNormal = v[0] / distance;\r\n    const yNormal = v[1] / distance;\r\n    return [xNormal, yNormal];\r\n}\r\n\r\nexport const distance = (x, y, x2, y2) => {\r\n    return pythagoras(x2 - x, y2 - y);\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport { Delaunay } from \"d3-delaunay\";\r\nimport { scaleLinear } from \"d3-scale\";\r\nimport useCanvas from \"../hooks/UseCanvas\";\r\nimport { pythagoras, distance } from \"../utils/utils\";\r\n\r\nconst Canvas = (props) => {\r\n  const center = useCallback(\r\n    () => [props.width * 0.5, props.height * 0.5],\r\n    [props.height, props.width]\r\n  );\r\n\r\n  const colors = useCallback(() => {\r\n    const maxDistance = pythagoras(center()[0], center()[1]);\r\n    return scaleLinear()\r\n      .domain([0, maxDistance])\r\n      .range([props.secondColor, props.firstColor]);\r\n  }, [center, props.firstColor, props.secondColor]);\r\n\r\n  const colorsInverted = useCallback(() => {\r\n    const maxDistance = pythagoras(center()[0], center()[1]);\r\n    return scaleLinear().domain([0, maxDistance]).range([\"#DEDC47\", \"#edec9b\"]);\r\n  }, [center]);\r\n\r\n  const update = useCallback(\r\n    (ctx, frameCount) => {\r\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n      ctx.fillStyle = \"#ffffff\";\r\n      ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n      const delaunay = Delaunay.from(props.particles);\r\n      const voronoi = delaunay.voronoi([\r\n        0.5,\r\n        0.5,\r\n        ctx.canvas.width,\r\n        ctx.canvas.height,\r\n      ]);\r\n\r\n      const color = colorsInverted()(\r\n        distance(props.particles[0][0], props.particles[0][1], center()[0], center()[1])\r\n      );\r\n      ctx.fillStyle = color;\r\n      ctx.beginPath();\r\n      voronoi.renderCell(0, ctx);\r\n      ctx.fill();\r\n\r\n      props.particles.forEach((p, i) => {\r\n        if (i === 0) {\r\n          return;\r\n        }\r\n        const next = props.animation(props.particles, i, ctx, frameCount);\r\n        if (next) {\r\n          props.particles[i] = next;\r\n        }\r\n\r\n        const color = colors()(distance(p[0], p[1], center()[0], center()[1]));\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        voronoi.renderCell(i, ctx);\r\n        ctx.fill();\r\n      });\r\n\r\n      ctx.beginPath();\r\n      voronoi.render(ctx);\r\n      voronoi.renderBounds(ctx);\r\n      ctx.lineWidth = props.strokeSize;\r\n      ctx.strokeStyle = props.strokeColor;\r\n      ctx.stroke();\r\n    },\r\n    [\r\n      center,\r\n      colors,\r\n      colorsInverted,\r\n      props\r\n    ]\r\n  );\r\n\r\n  const handleMouseMove = useCallback(\r\n    (context, event) => {\r\n      props.particles[0] = [event.offsetX, event.offsetY];\r\n      update(context);\r\n    },\r\n    [props.particles, update]\r\n  );\r\n\r\n  const canvasRef = useCanvas(update, {\r\n    onMouseMove: handleMouseMove,\r\n    onTouchMove: handleMouseMove,\r\n  });\r\n\r\n  return <canvas ref={canvasRef} {...props} />;\r\n};\r\n\r\nexport default Canvas;\r\n","import './Controls.css';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst Controls = props => {\r\n\r\n    const minNumPoints = 1;\r\n    const maxNumPoints = 300;\r\n\r\n    const minStrokeSize = 0;\r\n    const maxStrokeSize = 20;\r\n\r\n    return <div className=\"Controls\">\r\n        <fieldset>\r\n            <div>\r\n                <label>Number of Points:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.options.numPoints}\r\n                    min={minNumPoints}\r\n                    max={maxNumPoints}\r\n                    onChange={(e) => props.onOptionsChange(e.target.value || 1, 'numPoints', true)}\r\n                >\r\n                </input>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Outer Color:</label>\r\n                <input\r\n                    type=\"color\"\r\n                    value={props.options.firstColor}\r\n                    onChange={(e) => props.onOptionsChange(e.target.value, 'firstColor')}\r\n                >\r\n                </input>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Inner Color:</label>\r\n                <input\r\n                    type=\"color\"\r\n                    value={props.options.secondColor}\r\n                    onChange={(e) => props.onOptionsChange(e.target.value, 'secondColor')}\r\n                >\r\n                </input>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Stroke Color:</label>\r\n                <input\r\n                    type=\"color\"\r\n                    value={props.options.strokeColor}\r\n                    onChange={(e) => props.onOptionsChange(e.target.value, 'strokeColor')}\r\n                >\r\n                </input>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Stroke Size:</label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.options.strokeSize}\r\n                    min={minStrokeSize}\r\n                    max={maxStrokeSize}\r\n                    onChange={(e) => props.onOptionsChange(e.target.value, 'strokeSize')}\r\n                >\r\n                </input>\r\n            </div>\r\n\r\n            <div>\r\n                <label>Animation:</label>\r\n                <select onChange={(e) => props.onOptionsChange(props.animations[e.target.value], 'animation')} name=\"animations\">\r\n                    <option value=\"none\">None</option>\r\n                    <option value=\"expand\">Expand</option>\r\n                    <option value=\"orbit\">Orbit</option>\r\n                </select>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => props.onResetClick()}>Reset</button>\r\n            </div>\r\n\r\n        </fieldset>\r\n    </div>\r\n}\r\n\r\nControls.propTypes = {\r\n    options: PropTypes.object.isRequired,\r\n    onOptionsChange: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Controls;","import { normalize } from \"../utils/utils\";\r\n\r\nconst expand = (particles, index, ctx) => {\r\n    if (index === 0) {\r\n        return;\r\n    }\r\n    const centerPoint = [ctx.canvas.width / 2, ctx.canvas.height / 2];\r\n    const p = particles[index];\r\n    const vector = normalize(centerPoint, p);\r\n    let nextX = Math.round((p[0] + vector[0]) * 100) / 100;\r\n    let nextY = Math.round((p[1] + vector[1]) * 100) / 100;\r\n    // if (\r\n    //     nextX < 0 ||\r\n    //     nextY < 0 ||\r\n    //     nextX > ctx.canvas.width ||\r\n    //     nextY > ctx.canvas.height\r\n    // ) {\r\n    //     const widthMax = ctx.canvas.width / 2 + 5;\r\n    //     const widthMin = ctx.canvas.width / 2 - 5;\r\n    //     const heightMax = ctx.canvas.height / 2 + 5;\r\n    //     const heightMin = ctx.canvas.height / 2 - 5;\r\n    //     nextX = Math.floor(\r\n    //         Math.random() * (widthMax - widthMin) + widthMin\r\n    //     );\r\n    //     nextY = Math.floor(\r\n    //         Math.random() * (heightMax - heightMin) + heightMin\r\n    //     );\r\n    // }\r\n    return [nextX, nextY];\r\n}\r\n\r\nexport default expand;","import { distance, vector } from \"../utils/utils\";\r\n\r\nconst orbit = (particles, index, ctx, frameCount = 0) => {\r\n    if (frameCount % 1 === 0) {\r\n        const centerPoint = [ctx.canvas.width / 2, ctx.canvas.height / 2];\r\n        const p = particles[index];\r\n        const radius = distance(p[0], p[1], centerPoint[0], centerPoint[1])\r\n        const v = vector(centerPoint, p);\r\n        console.log('DISTANCE!!', radius);\r\n        console.log('VECTOR!!', v);\r\n        const radians = Math.atan2(v[1], v[0]);\r\n        const newRadians = index % 2 === 0 ? radians + 0.003 : radians - 0.003;\r\n\r\n        const newX = centerPoint[0] + (radius * Math.cos(newRadians))\r\n        const newY = centerPoint[1] + (radius * Math.sin(newRadians))\r\n        console.log('NEW POINTS!!', newX, newY);\r\n        return [newX, newY];\r\n    }\r\n    return particles[index];\r\n\r\n}\r\n\r\nexport default orbit;","import { useCallback, useState } from 'react';\r\nimport './App.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport Canvas from './components/Canvas';\r\nimport Controls from './components/Controls';\r\nimport expand from \"./animations/Expand\";\r\nimport orbit from './animations/Orbit';\r\n\r\nfunction App() {\r\n\r\n  const widthFactor = 0.75;\r\n  const heightFactor = 0.75;\r\n  const width = window.innerWidth * widthFactor;\r\n  const height = window.innerHeight * heightFactor;\r\n\r\n  const animations = {\r\n    none: () => { },\r\n    expand: (particles, index, ctx, frameCount) => expand(particles, index, ctx),\r\n    orbit: (particles, index, ctx, frameCount) => orbit(particles, index, ctx, frameCount)\r\n  }\r\n\r\n  const [options, setOptions] = useState({\r\n    numPoints: 50,\r\n    firstColor: '#23D100',\r\n    secondColor: '#135FC3',\r\n    strokeSize: 1,\r\n    strokeColor: '#000000',\r\n    animation: animations['none']\r\n  });\r\n\r\n  const [showMenu, setShowMenu] = useState(true);\r\n\r\n  const randomParticles = useCallback(\r\n    () => Array.from({ length: options.numPoints }, () => [Math.random() * width, Math.random() * height]),\r\n    [height, options.numPoints, width]\r\n  );\r\n\r\n  const [particles, setParticles] = useState(randomParticles());\r\n\r\n  const onControlChange = (val, key, resetPoints = false) => {\r\n    let newOptions = { ...options };\r\n    newOptions[key] = val;\r\n    setOptions(Object.assign({}, newOptions));\r\n    if (resetPoints) {\r\n      setParticles(randomParticles())\r\n    }\r\n  }\r\n\r\n  const onResetClick = () => {\r\n    setParticles(randomParticles());\r\n  }\r\n\r\n  const toggleMenu = () => {\r\n    setShowMenu(!showMenu)\r\n    setParticles(randomParticles())\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Canvas\">\r\n        <Canvas\r\n          height={window.innerHeight * heightFactor}\r\n          width={window.innerWidth * widthFactor}\r\n          animation={options.animation}\r\n          numPoints={options.numPoints}\r\n          particles={particles}\r\n          firstColor={options.firstColor}\r\n          secondColor={options.secondColor}\r\n          strokeSize={options.strokeSize}\r\n          strokeColor={options.strokeColor}\r\n        />\r\n        <span class=\"ToggleButton\">\r\n          <button onClick={() => toggleMenu()}>\r\n            {\r\n              showMenu ?\r\n                <i className=\"fa fa-times\" ariaHidden=\"true\"></i> :\r\n                <i className=\"fa fa-bars\" ariaHidden=\"true\"></i>\r\n            }\r\n          </button>\r\n        </span>\r\n      </div>\r\n      {\r\n        showMenu &&\r\n        <div className=\"Controls\">\r\n          <Controls\r\n            options={options}\r\n            animations={animations}\r\n            onResetClick={() => onResetClick()}\r\n            onOptionsChange={(val, key, resetPoints) => onControlChange(val, key, resetPoints)}\r\n          />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}