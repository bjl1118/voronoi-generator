{"version":3,"sources":["components/Canvas.js","App.js","index.js"],"names":["Canvas","props","canvasRef","useRef","particles","Array","from","length","Math","random","width","height","center","useCallback","colors","maxDistance","pythagoras","scaleLinear","domain","range","colorsInverted","distance","x","y","a","b","sqrt","update","ctx","clearRect","canvas","fillStyle","fillRect","voronoi","Delaunay","color","beginPath","renderCell","fill","forEach","p","i","render","renderBounds","strokeStyle","stroke","handleMouseMove","context","event","layerX","layerY","useEffect","current","getContext","onmousemove","ref","App","className","window","innerHeight","innerWidth","ReactDOM","StrictMode","document","getElementById"],"mappings":"yOAkFeA,EA9EA,SAAAC,GACX,IACMC,EAAYC,iBAAO,MACnBC,EAAYC,MAAMC,KAAK,CAAEC,OAFrB,MAEkC,iBAAM,CAACC,KAAKC,SAAWR,EAAMS,MAAOF,KAAKC,SAAWR,EAAMU,WAEhGC,EAASC,uBAAY,iBAAM,CAAe,GAAdZ,EAAMS,MAA4B,GAAfT,EAAMU,UAAe,CAACV,EAAMU,OAAQV,EAAMS,QAEzFI,EAASD,uBAAY,WACvB,IAAME,EAAcC,EAAWJ,IAAS,GAAIA,IAAS,IACrD,OAAOK,cACFC,OAAO,CAAC,EAAGH,IACXI,MAAM,CAAC,OAAQ,WACrB,CAACP,IAEEQ,EAAiBP,uBAAY,WAC/B,IAAME,EAAcC,EAAWJ,IAAS,GAAIA,IAAS,IACrD,OAAOK,cACFC,OAAO,CAAC,EAAGH,IACXI,MAAM,CAAC,UAAW,cACxB,CAACP,IAEES,EAAWR,uBAAY,SAACS,EAAGC,GAC7B,IAAMC,EAAIZ,IAAS,GAAKU,EAClBG,EAAIb,IAAS,GAAKW,EACxB,OAAOP,EAAWQ,EAAGC,KACtB,CAACb,IAEEI,EAAa,SAACQ,EAAGC,GAAJ,OAAUjB,KAAKkB,KAAKF,EAAIA,EAAIC,EAAIA,IAE7CE,EAASd,uBAAY,SAAAe,GACvBA,EAAIC,UAAU,EAAG,EAAGD,EAAIE,OAAOpB,MAAOkB,EAAIE,OAAOnB,QACjDiB,EAAIG,UAAY,UAChBH,EAAII,SAAS,EAAG,EAAGJ,EAAIE,OAAOpB,MAAOkB,EAAIE,OAAOnB,QAEhD,IACMsB,EADWC,IAAS5B,KAAKF,GACN6B,QAAQ,CAAC,GAAK,GAAKL,EAAIE,OAAOpB,MAAOkB,EAAIE,OAAOnB,SAEnEwB,EAAQf,IAAiBC,EAASjB,EAAU,GAAG,GAAIA,EAAU,GAAG,KACtEwB,EAAIG,UAAYI,EAChBP,EAAIQ,YACJH,EAAQI,WAAW,EAAGT,GACtBA,EAAIU,OAEJlC,EAAUmC,SAAQ,SAACC,EAAGC,GAClB,GAAU,IAANA,EAAJ,CAGA,IAAMN,EAAQrB,IAASO,EAASmB,EAAE,GAAIA,EAAE,KACxCZ,EAAIG,UAAYI,EAChBP,EAAIQ,YACJH,EAAQI,WAAWI,EAAGb,GACtBA,EAAIU,WAGRV,EAAIQ,YACJH,EAAQS,OAAOd,GACfK,EAAQU,aAAaf,GACrBA,EAAIgB,YAAc,OAClBhB,EAAIiB,WACL,CAAC/B,EAAQM,EAAgBC,EAAUjB,IAEhC0C,EAAkBjC,uBAAY,SAACkC,EAASC,GAC1C5C,EAAU,GAAK,CAAC4C,EAAMC,OAAQD,EAAME,QACpCvB,EAAOoB,KACR,CAAC3C,EAAWuB,IAWf,OATAwB,qBAAU,WACN,IACMJ,EADS7C,EAAUkD,QACFC,WAAW,MAClCN,EAAQjB,OAAOwB,YAAc,SAAAN,GACzBF,EAAgBC,EAASC,IAE7BrB,EAAOoB,KACR,CAACD,EAAiBnB,IAEd,oCAAQ4B,IAAKrD,GAAeD,KChExBuD,MAZf,WAKE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,CAAQ9C,OAJS,IAID+C,OAAOC,YAA4BjD,MALnC,IAK0CgD,OAAOE,gBCLvEC,IAASnB,OACP,cAAC,IAAMoB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.69709b83.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback } from \"react\";\r\nimport { Delaunay } from 'd3-delaunay';\r\nimport { scaleLinear } from 'd3-scale';\r\n\r\nconst Canvas = props => {\r\n    const n = 200;\r\n    const canvasRef = useRef(null);\r\n    const particles = Array.from({ length: n }, () => [Math.random() * props.width, Math.random() * props.height]);\r\n\r\n    const center = useCallback(() => [props.width * 0.5, props.height * 0.5], [props.height, props.width]);\r\n\r\n    const colors = useCallback(() => {\r\n        const maxDistance = pythagoras(center()[0], center()[1]);\r\n        return scaleLinear()\r\n            .domain([0, maxDistance])\r\n            .range(['#fff', '#d00']);\r\n    }, [center]);\r\n\r\n    const colorsInverted = useCallback(() => {\r\n        const maxDistance = pythagoras(center()[0], center()[1]);\r\n        return scaleLinear()\r\n            .domain([0, maxDistance])\r\n            .range(['#DEDC47', '#edec9b'])\r\n    }, [center]);\r\n\r\n    const distance = useCallback((x, y) => {\r\n        const a = center()[0] - x;\r\n        const b = center()[1] - y;\r\n        return pythagoras(a, b);\r\n    }, [center]);\r\n\r\n    const pythagoras = (a, b) => Math.sqrt(a * a + b * b);\r\n\r\n    const update = useCallback(ctx => {\r\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n        ctx.fillStyle = '#ffffff';\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        const delaunay = Delaunay.from(particles);\r\n        const voronoi = delaunay.voronoi([0.5, 0.5, ctx.canvas.width, ctx.canvas.height]);\r\n\r\n        const color = colorsInverted()(distance(particles[0][0], particles[0][1]));\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        voronoi.renderCell(0, ctx);\r\n        ctx.fill();\r\n\r\n        particles.forEach((p, i) => {\r\n            if (i === 0) {\r\n                return;\r\n            }\r\n            const color = colors()(distance(p[0], p[1]));\r\n            ctx.fillStyle = color;\r\n            ctx.beginPath();\r\n            voronoi.renderCell(i, ctx);\r\n            ctx.fill();\r\n        });\r\n\r\n        ctx.beginPath();\r\n        voronoi.render(ctx);\r\n        voronoi.renderBounds(ctx);\r\n        ctx.strokeStyle = '#000';\r\n        ctx.stroke();\r\n    }, [colors, colorsInverted, distance, particles]);\r\n\r\n    const handleMouseMove = useCallback((context, event) => {\r\n        particles[0] = [event.layerX, event.layerY];\r\n        update(context);\r\n    }, [particles, update]);\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        context.canvas.onmousemove = event => {\r\n            handleMouseMove(context, event);\r\n        };\r\n        update(context)\r\n    }, [handleMouseMove, update]);\r\n\r\n    return <canvas ref={canvasRef} {...props} />\r\n}\r\n\r\nexport default Canvas;\r\n","import './App.css';\r\nimport Canvas from './components/Canvas';\r\n\r\nfunction App() {\r\n\r\n  const widthFactor = 0.75;\r\n  const heightFactor = 0.75\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Canvas height={window.innerHeight * heightFactor} width={window.innerWidth * widthFactor} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}